name: Continuous Deployment

on:
  push:
    branches:
      - main

env:
  JENKINS_INBOUND_AGENT_IMAGE_NAME: jenkins/inbound-agent
  PRODUCT_IMAGE_NAME: mcr.microsoft.com/dotnet/framework/sdk
  IMAGE_NAME: dwolla/jenkins-agent-dotnet-framework

jobs:
  build-and-push:
    name: Build, test, and publish images
    runs-on: windows-2019
    outputs:
      git-tag: ${{ steps.get-versions.outputs.git-tag }}
    strategy:
      max-parallel: 2
      matrix:
        jdk: [8, 11]
        include:
        - jdk: 8
          dockerfile: 8/sdk/windowsservercore-ltsc2019/Dockerfile
          tag_suffixes: '["-windowsservercore-ltsc2019-amd64"]'
          context: '.'
        - jdk: 11
          dockerfile: 11/sdk/windowsservercore-ltsc2019/Dockerfile
          tag_suffixes: '["", "-windowsservercore-ltsc2019-amd64"]'
          context: '.'
    steps:
      - name: Set additional environment variables
        run: |
          # Generate a unique image tag so the local docker build can be referenced when pushed.
          echo "LOCAL_IMAGE_TAG=$(cat /proc/sys/kernel/random/uuid)" >> $GITHUB_ENV

      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.LOCAL_IMAGE_TAG }} --file ${{ matrix.dockerfile }} ${{ matrix.context }}

      - name: Get versions
        uses: actions/github-script@v6
        id: get-versions
        with:
          script: |
            const fs = require('fs')

            function escapeStringRegexp(string) {
                return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
            }   

            getDockerImageVersion(imageName) {
              const dockerfile = fs.readFileSync(`${process.env.GITHUB_WORKSPACE}/${{ matrix.dockerfile }}`, 'utf8').trim()

              const docker_from_instruction_regex = new RegExp("^(?:FROM\s+)${escapeStringRegexp(imageName)}(:(?<tag>[\w.\-_]{1,127})|)$", "mi")
              const image_tag = dockerfile.match(docker_from_instruction_regex).groups.tag
              # const image_tag = [...dockerfile.matchAll(docker_from_instruction_regex)].at(-1).groups.tag

              const docker_tag_regex = /^(?<version>.*)-(?:nanoserver|windowsservercore)-(?:.*)$/i
              return image_tag.match(docker_tag_regex).groups.version
            }

            const product_version = getDockerImageVersion(${{ env.PRODUCT_IMAGE_NAME }})
            const jenkins_inbound_agent_version = getDockerImageVersion(${{ env.JENKINS_INBOUND_AGENT_IMAGE_NAME }})
            const revision = fs.readFileSync(`${process.env.GITHUB_WORKSPACE}/revision.txt`)

            core.setOutput('git-tag', `v${product_version}-${jenkins_inbound_agnent_version}-${revision}`)
            core.setOutput('docker-tags', ${{ matrix.tag_suffixes }}.map(s => `${{ env.IMAGE_NAME }}:${product_version}-${jenkins_inbound_agnent_version}-${revision}${s}`))

      - name: Push Docker image
        run: |
          '${{ steps.get-versions.outputs.docker-tags }}' | ConvertFrom-Json | foreach {
            if (! (docker manifest inspect $_))
            {
              Write-Output "Docker tag $_ does not exist, publishing."
              docker tag ${{ env.LOCAL_IMAGE_TAG }} $_
              docker push $_
            } 
            else
            {
              Write-Output "Docker tag already exists: $_. Please increment revision.txt."
              exit 1
            }
          }

  create-tag:
    name: Create tag
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const resp = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/${{ needs.build-and-push.outputs.git-tag }}',
              });
              return core.setFailed("Tag already exists: ${{ needs.build-and-push.outputs.git-tag }}. Please increment revision.txt.");
            } catch (error) {
                if (error.status === 404) {
                  github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'refs/tags/${{ needs.build-and-push.outputs.git-tag }}',
                    sha: context.sha
                  })

                  core.info("Git tag ${{ needs.build-and-push.outputs.git-tag }} does not exist, publishing.")
                } else {
                  throw error;
                }
            }

            